package com.csform.android.uiapptemplate;

import java.security.KeyManagementException;
import java.security.NoSuchAlgorithmException;
import java.security.cert.X509Certificate;
import java.util.ArrayList;
import java.util.List;

import javax.net.ssl.HostnameVerifier;
import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLSession;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.util.EntityUtils;
import org.json.JSONObject;

import com.csform.android.uiapptemplate.view.FloatLabeledEditText;

import android.app.Activity;
import android.content.Intent;
import android.os.AsyncTask;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.Window;
import android.widget.ProgressBar;
import android.widget.TextView;
import android.widget.Toast;

public class Registration extends Activity implements OnClickListener {

	public static final String LOGIN_PAGE_AND_LOADERS_CATEGORY = "com.csform.android.uiapptemplate.LogInPageAndLoadersActivity";
	public static final String DARK = "Dark";
	public static final String LIGHT = "Light";
	com.csform.android.uiapptemplate.view.FloatLabeledEditText editTextPhone,
			editTextEmail, editTextUsername, editTextPassword;
	ProgressBar progressBarMapFragmentDetail;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		getWindow().requestFeature(Window.FEATURE_NO_TITLE); // Removing
																// ActionBar
		String category = LIGHT;
		Bundle extras = getIntent().getExtras();
		if (extras != null
				&& extras.containsKey(LOGIN_PAGE_AND_LOADERS_CATEGORY)) {
			category = extras.getString(LOGIN_PAGE_AND_LOADERS_CATEGORY, LIGHT);
		}
		setContentView(category);
	}

	private void setContentView(String category) {
		if (category.equals(DARK)) {
			setContentView(R.layout.activity_login_page_dark);
		} else if (category.equals(LIGHT)) {
			setContentView(R.layout.activity_registration);
		}

		progressBarMapFragmentDetail = (ProgressBar) findViewById(R.id.progressBarMapFragmentDetail1);
		TextView back, register, skip;
		editTextPhone = (FloatLabeledEditText) findViewById(R.id.editTextRegistrationPhone);
		editTextEmail = (FloatLabeledEditText) findViewById(R.id.editTextRegistrationEmail);
		editTextUsername = (FloatLabeledEditText) findViewById(R.id.editTextRegistrationUsername);
		editTextPassword = (FloatLabeledEditText) findViewById(R.id.editTextRegistrationPassword);
		back = (TextView) findViewById(R.id.back);
		register = (TextView) findViewById(R.id.register);
		back.setOnClickListener(this);
		register.setOnClickListener(this);
	}

	@Override
	public void onClick(View v) {
		/*
		 * if (v instanceof TextView) { TextView tv = (TextView) v;
		 * Toast.makeText(this, tv.getText(), Toast.LENGTH_SHORT).show(); }
		 */
		if (v.getId() == R.id.register) {
			String phone = editTextPhone.getText().toString().trim();
			String email = editTextEmail.getText().toString().trim();
			String username = editTextUsername.getText().toString().trim();
			String password = editTextPassword.getText().toString().trim();
			register(phone, email, username, password);
		}
		if (v.getId() == R.id.back) {
			startActivity(new Intent(getApplicationContext(),
					LogInPageActivity.class));
			finish();
		}
	}

	private void register(final String phone, final String email,
			final String username, final String password) {
		// TODO Auto-generated method stub
		new AsyncTask<Void, Long, Boolean>() {

			Boolean status;
			String url;

			protected void onPreExecute() {

				url = getResources().getString(R.string.URL_REGISTRATION);

				progressBarMapFragmentDetail.setVisibility(View.VISIBLE);
			};

			protected void onPostExecute(Boolean result) {
				progressBarMapFragmentDetail.setVisibility(View.INVISIBLE);
				if (result) {
					startActivity(new Intent(getApplicationContext(),
							ActivationCode.class));
					finish();
				} 

			};

			@Override
			protected Boolean doInBackground(Void... added_item) {
				// TODO Auto-generated method stub
				status = retrieveData(url, phone, email, username, password);
				return status;
			}

		}.execute(null, null, null);

	}

	protected Boolean retrieveData(String url, String phone, String email,
			String username, String password) {
		// TODO Auto-generated method stub
		SSLContext ctx = null;
		try {
			ctx = SSLContext.getInstance("TLS");
		} catch (NoSuchAlgorithmException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			ctx.init(null, new TrustManager[] { new X509TrustManager() {
				public void checkClientTrusted(X509Certificate[] chain,
						String authType) {
				}

				public void checkServerTrusted(X509Certificate[] chain,
						String authType) {
				}

				public X509Certificate[] getAcceptedIssuers() {
					return new X509Certificate[] {};
				}
			} }, null);
		} catch (KeyManagementException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		HttpsURLConnection.setDefaultHostnameVerifier(new HostnameVerifier() {

			@Override
			public boolean verify(String hostname, SSLSession session) {
				// TODO Auto-generated method stub
				return true;
			}

		});
		HttpsURLConnection.setDefaultSSLSocketFactory(ctx.getSocketFactory());
		HttpEntity httpEntity = null;
		// TODO Auto-generated method stub
		try {

			final List<NameValuePair> params = new ArrayList<NameValuePair>();
			params.add(new BasicNameValuePair("User_Phone", phone));
			params.add(new BasicNameValuePair("User_Passwd", password));
			params.add(new BasicNameValuePair("User_Email", email));
			params.add(new BasicNameValuePair("User_Username", username));
			HttpPost httpPost = new HttpPost(url);
			httpPost.setEntity(new UrlEncodedFormEntity(params));
			DefaultHttpClient httpClient = new DefaultHttpClient();
			HttpResponse httpResponse = httpClient.execute(httpPost);
			httpEntity = httpResponse.getEntity();
			String entityResponse = EntityUtils.toString(httpEntity);
			Log.e("entity response", entityResponse);

			JSONObject json = new JSONObject(entityResponse);

			if (json.getString("Status").equalsIgnoreCase("Error")
					&& json.getString("Message")
							.equalsIgnoreCase(
									"Couldn't send verification codes, Try after sometime")) {

				Toast.makeText(getApplicationContext(),
						"check email/ email spam to get activation code",
						Toast.LENGTH_LONG).show();
				return true;
			} else if(json.getString("Status").equalsIgnoreCase("Error")
					&& json.getString("Message")
					.equalsIgnoreCase(
							"An user with the provided phone or email exists!")){
				Toast.makeText(null, "User already Exist", Toast.LENGTH_LONG).show();
				return false;
				
			}
			else
			{
				return true;
			}

		} catch (Exception ex) {
			ex.printStackTrace();
			return false;

		}

	}
}
