package com.csform.android.uiapptemplate;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.util.EntityUtils;
import org.json.JSONObject;

import android.app.Activity;
import android.app.AlertDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.location.Address;
import android.location.Geocoder;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;
import android.provider.MediaStore;
import android.provider.MediaStore.Images;
import android.util.Base64;
import android.util.Log;
import android.view.Gravity;
import android.view.View;
import android.view.ViewGroup;
import android.view.Window;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;

public class Add_item extends Activity implements View.OnClickListener,
		android.widget.AdapterView.OnItemSelectedListener {

	static String response;
	private static final int CAM_REQUEST = 2;
	static Boolean dialogboxShow;
	int no_of_image;;
	Bitmap[] bitmap;
	String[] imagesPath;
	String lon;
	String lat;
	EditText title, address, descEditText;
	private LinearLayout linearLayoutImage;
	private Button buttonSubmit;
	private ImageButton imageButtonGallery, imageButtonTakePic;
	private ArrayList<String> imagesPathList;
	private Bitmap yourbitmap;
	private Bitmap resized;
	private final int PICK_IMAGE_MULTIPLE = 1;
	ProgressBar progressBar;
	private Spinner spinner;
	private EditText others;
	UserSessionManager session;
	private String fullAdress;
	static String filePath;
	static String areaName;
	static String cityName;
	static String stateName;
	static String countryName;
	static String full_address;
	static LocationManager location_manager;
	static LocationListener listner;

	static List<Address> addresses;
	static Location loc;

	static Geocoder geocoder;
	ArrayAdapter<String> adapter;

	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);

		requestWindowFeature(Window.FEATURE_INDETERMINATE_PROGRESS);
		
		// setProgressBarIndeterminateVisibility(false);
		setContentView(R.layout.add_item);

		location_manager = (LocationManager) getSystemService(Context.LOCATION_SERVICE);
		listner = new MyLocationListner();
		location_manager.requestLocationUpdates(LocationManager.GPS_PROVIDER,
				10000, 10, listner);
		location_manager.getLastKnownLocation(LocationManager.GPS_PROVIDER);
		// setProgressBarIndeterminateVisibility(false);
		dialogboxShow = true;
		session = new UserSessionManager(getApplicationContext());
		Bundle bundle = getIntent().getExtras();

		// Extract the data…
		lon = bundle.getString("lon");
		lat = bundle.getString("lat");
		
		progressBar = (ProgressBar) findViewById(R.id.progressBarImage);
		linearLayoutImage = (LinearLayout) findViewById(R.id.linearLayoutForImages);
		imageButtonGallery = (ImageButton) findViewById(R.id.imageButtonGallery);
		imageButtonTakePic = (ImageButton) findViewById(R.id.imageButtonCamera);
		buttonSubmit = (Button) findViewById(R.id.buttonSubmit);
		title = (EditText) findViewById(R.id.editTextTitle);
		address = (EditText) findViewById(R.id.editTextAddress);
		descEditText = (EditText) findViewById(R.id.editTextDescription);
		title.requestFocus();
		imageButtonGallery.setOnClickListener(this);
		imageButtonTakePic.setOnClickListener(this);
		buttonSubmit.setOnClickListener(this);
		spinner = (Spinner) findViewById(R.id.spinnerCategory);
		List<String> spinnerArray =  new ArrayList<String>();
		for(int i=0;i<MapFragment.mylist.size();i++)
		{
			spinnerArray.add(MapFragment.mylist.get(i).get("type_name"));
		}
		
	
	
		adapter = new ArrayAdapter<String>(getApplicationContext(), R.layout.my_spinner_style,spinnerArray) {

			 public View getView(int position, View convertView,ViewGroup parent) {

			        View v = super.getView(position, convertView, parent);

			        ((TextView) v).setTextSize(16);

			        return v;

			    }

			    public View getDropDownView(int position, View convertView,ViewGroup parent) {

			        View v = super.getDropDownView(position, convertView,parent);

			        ((TextView) v).setGravity(Gravity.CENTER);

			        return v;

			    }

			};


				
		spinner.setAdapter(adapter);

		spinner.setOnItemSelectedListener(this);
		others = (EditText) findViewById(R.id.editCategoryOther);

		setProgressBarIndeterminateVisibility(false);
		try{
		geocoder = new Geocoder(getApplicationContext(), Locale.ENGLISH);
		addresses = geocoder.getFromLocation(Double.valueOf(lat),
				Double.valueOf(lon), 1);
		new StringBuilder();
		if (geocoder.isPresent()) {
			addresses.get(0);

			String address1 = addresses.get(0).getAddressLine(0); 
			if (address1 == null) {
				address1 = "";
			}
			String address2=addresses.get(0).getAddressLine(1);
			if (address2 == null) {
				address2 = "";
			}
			String city = addresses.get(0).getLocality();
			if (city == null) {
				city = "";
			}
			String state = addresses.get(0).getAdminArea();
			if (state == null) {
				state = "";
			}
			String country = addresses.get(0).getCountryName();
			if (country == null) {
				country = "";
			}
			String postalCode = addresses.get(0).getPostalCode();
			if (postalCode == null) {
				postalCode = "";
			}
			fullAdress = address1 + ", "+address2+", " + city + ", " + state + ", "
					+ country + " " + postalCode;
			if (fullAdress.trim().length() == 0) {
				String knownName = addresses.get(0).getFeatureName(); 
				fullAdress = knownName;
			}
			Add_item.this.address.setText(fullAdress);

		}

	} catch (IOException e) {
	}

		// dropdown.setOnItemSelectedListener(this);
	}

		@Override
	protected void onResume() {
		// TODO Auto-generated method stub
		super.onResume();
		dialogboxShow = true;
		Log.e("on Resume", "onResume......");
		location_manager.requestLocationUpdates(LocationManager.GPS_PROVIDER,
				3000, 10, listner);
		location_manager.getLastKnownLocation(LocationManager.GPS_PROVIDER);
	}

	@Override
	protected void onPause() {
		// TODO Auto-generated method stub
		super.onPause();
		dialogboxShow = false;
		Log.e("on pause", "onPause......");
		location_manager.removeUpdates(listner);
	}

	@Override
	public void onClick(View view) {
		if (view.getId() == R.id.imageButtonGallery) {
			Intent intent = new Intent(Add_item.this,
					CustomPhotoGalleryActivity.class);
			startActivityForResult(intent, PICK_IMAGE_MULTIPLE);
		} else if (view.getId() == R.id.imageButtonCamera) {

			Intent cameraIntent = new Intent(
					android.provider.MediaStore.ACTION_IMAGE_CAPTURE);
			startActivityForResult(cameraIntent, CAM_REQUEST);

		} else if (view.getId() == R.id.buttonSubmit) {

			setProgressBarIndeterminateVisibility(true);
			if (imagesPathList != null) {
				if (imagesPathList.size() > 0) {
					no_of_image = imagesPathList.size();
					bitmap = new Bitmap[no_of_image];
					for (int i = 0; i < no_of_image; i++) {
						bitmap[i] = BitmapFactory.decodeFile(imagesPath[i]);
					}
					
				}
			} else {
				no_of_image = 0;
				
				// Toast.makeText(Add_item.this," no images are selected",
				// Toast.LENGTH_SHORT).show();
			}
		}

	}

	

	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
		super.onActivityResult(requestCode, resultCode, data);
		if (resultCode == RESULT_OK && requestCode == CAM_REQUEST) {

			Bitmap photo = (Bitmap) data.getExtras().get("data");
			imagesPathList = new ArrayList<String>();
			imagesPath = new String[1];
			Uri tempUri = getImageUri(getApplicationContext(), photo);

			// CALL THIS METHOD TO GET THE ACTUAL PATH
			File finalFile = new File(getRealPathFromURI(tempUri));

			filePath = finalFile.toString();
			Log.e("path", finalFile.toString());

			try {
				linearLayoutImage.removeAllViews();
			} catch (Throwable e) {
				e.printStackTrace();
			}
			imagesPathList.add(filePath);
			imagesPath[0] = filePath;
			ImageView imageView = new ImageView(getApplicationContext());
			resized = Bitmap.createScaledBitmap(photo, 200, 300, true);
			imageView.setImageBitmap(resized);

			imageView.setAdjustViewBounds(true);
			linearLayoutImage.addView(imageView);
		} else if (resultCode == RESULT_OK) {
			if (requestCode == PICK_IMAGE_MULTIPLE) {
				imagesPathList = new ArrayList<String>();
				imagesPath = data.getStringExtra("data").split("\\|");
				try {
					linearLayoutImage.removeAllViews();
				} catch (Throwable e) {
					e.printStackTrace();
				}
				for (int i = 0; i < imagesPath.length; i++) {
					imagesPathList.add(imagesPath[0]);
					yourbitmap = BitmapFactory.decodeFile(imagesPath[i]);
					resized = Bitmap.createScaledBitmap(yourbitmap, 200, 300,
							true);
					ImageView imageView = new ImageView(this);
					imageView.setImageBitmap(resized);
					imageView.setAdjustViewBounds(true);
					imageView.setPadding(4, 4, 4, 4);
					linearLayoutImage.addView(imageView);
				}
			}

		}

	}

	public Uri getImageUri(Context inContext, Bitmap inImage) {
		ByteArrayOutputStream bytes = new ByteArrayOutputStream();
		inImage.compress(Bitmap.CompressFormat.JPEG, 100, bytes);
		String path = Images.Media.insertImage(inContext.getContentResolver(),
				inImage, "Title", null);
		return Uri.parse(path);
	}

	public String getRealPathFromURI(Uri uri) {
		Cursor cursor = getContentResolver().query(uri, null, null, null, null);
		cursor.moveToFirst();
		int idx = cursor.getColumnIndex(MediaStore.Images.ImageColumns.DATA);
		return cursor.getString(idx);
	}

	@Override
	public void onItemSelected(AdapterView<?> parent, View view, int position,
			long id) {
		// TODO Auto-generated method stub
		if (position == 4) {
			others.setVisibility(View.VISIBLE);
		} else {
			others.setVisibility(View.INVISIBLE);
		}

	}

	@Override
	public void onNothingSelected(AdapterView<?> parent) {
		// TODO Auto-generated method stub

	}

	public class MyLocationListner implements LocationListener {

		private String fullAdress;

		@SuppressWarnings("static-access")
		@Override
		public void onLocationChanged(Location location) {
			// TODO Auto-generated method stub
						}

		@Override
		public void onStatusChanged(String provider, int status, Bundle extras) {
			// TODO Auto-generated method stub

		}

		@Override
		public void onProviderEnabled(String provider) {
			// TODO Auto-generated method stub

		}

		@Override
		public void onProviderDisabled(String provider) {
			// TODO Auto-generated method stub

		}
	}
}
